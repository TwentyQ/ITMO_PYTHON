from typing import Dict, Any, Optional # Импортируем типы из модуля typing для аннотаций

def gen_bin_tree(height: int = 6, root: int = 5) -> Dict[str, Any]:
    """
    Создает бинарное дерево в виде словаря.

    Ключевые аргументы:
    height -- высота дерева
    root -- число в корне дерева

    Возвращает:
    dict -- бинарное дерево в виде словаря
    """

    # Если высота меньше 1, возвращается пустой словарь
    if height < 1:
        return {}

    # Если достигнута конечная высота, возвращает текущее значение узла
    if height == 1:
        return {"root": root, "left": None, "right": None}

    # Вычисляем дочерние ветви
    left_child = root ** 2  # Вычисляет левые ветви как квадрат корня
    right_child = root - 2  # Вычисляет правые ветви как корень минус 2

    # Формируем узел дерева: текущее значение + две ветки-потомка
    return {
        # Текущее значение узла
        "root": root,

        # Левая ветка: уменьшаем высоту, вычисляем новое значение
        "left": gen_bin_tree(height - 1, left_child),

        # Правая ветка: уменьшаем высоту, вычисляем новое значение
        "right": gen_bin_tree(height - 1, right_child)
    }